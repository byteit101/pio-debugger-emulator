# Monitor script for Logic Analyser example.
# To be executed on PIO 0, SM 0.

# Make a full reset of the emulator.
reset

# We loosely follow the initialization sequence as shown in:
# https://github.com/raspberrypi/pico-examples
# /blob/master/pio/logic_analyser/logic_analyser.c

# Configure Side Set Count.
side-set --pio=0 --sm=0 --count=0 --opt=false

# The code.
# .wrap_target
enter -a 00 -v 0x4007 # in pins, pin_count ; in this example, pin_count=7
# .wrap

# Just for convience and verification, list the program that
# we just entered, as viewed by PIO 0, SM 0.
unassemble --pio=0 --sm=0 --address=0 --count=1

########
# Init program (analoguous to logic_analyser_init() in logic_analyser.c).
########

# SM Config Set In Pins(base=pin_base).
pinctrl --pio=0 --sm=0 --in-base=0

# Configure Wrap.
wrap --pio=0 --sm=0 --wrap=0 --target=0

# Configure Clock Divider, here as 1.0 (maximum speed).
# We choose maximum speed since we do not want to see gaps when
# tracing the code.
clock --pio=0 --sm=0 --divider=1.0

# SM Config Set In Shift(right, autopush, threshold)
fifo --pio=0 --sm=0 --rx --shift-right
fifo --pio=0 --sm=0 --rx --auto=true
fifo --pio=0 --sm=0 --rx --threshold=28 # 4 samples á 7 bits

# We only need RX, so get an 8-deep FIFO!
fifo --pio=0 --sm=0 --join --rx

########
# Initialize SM (analoguous to function pio_sm_init() in Pico C SDK).
########

# Disable state machine 0 of PIO 0 while executing the following
# commands.
sm --pio=0 --sm=0 --enable=false

# Clear FIFOs.
fifo --pio=0 --sm=0 --clear

# Clear FIFO debug flags.
fifo --pio=0 --sm=0 --clear-tx-stall
fifo --pio=0 --sm=0 --clear-tx-over
fifo --pio=0 --sm=0 --clear-rx-under
fifo --pio=0 --sm=0 --clear-rx-stall

# Restart SM.
sm --pio=0 --sm=0 --restart

# Restart clock.
clock --pio=0 --sm=0 --restart

# Set instruction pointer (PC) to address 0.
registers --address=0x00

########
# End of SM initialization.
########

# Enable state machine 0 of PIO 0 to execute the program.
sm --pio=0 --sm=0 --enable=true

########
# End of program initialization.
########

# Put some values onto GPIO pins to be sampled.
# Bit pattern: 1010101 for GPIOs 0…6.
gpio --gpio=0 --set
gpio --gpio=1 --clear
gpio --gpio=2 --set
gpio --gpio=3 --clear
gpio --gpio=4 --set
gpio --gpio=5 --clear
gpio --gpio=6 --set

# Done.
quit
